// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// idAssetGroup
StringVector idAssetGroup(StringVector x);
RcppExport SEXP _tmctools_idAssetGroup(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(idAssetGroup(x));
    return rcpp_result_gen;
END_RCPP
}
// predictVars
DataFrame predictVars(const DataFrame modelT, const DataFrame& sample, const double radius, const List& vario);
RcppExport SEXP _tmctools_predictVars(SEXP modelTSEXP, SEXP sampleSEXP, SEXP radiusSEXP, SEXP varioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type modelT(modelTSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const List& >::type vario(varioSEXP);
    rcpp_result_gen = Rcpp::wrap(predictVars(modelT, sample, radius, vario));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tmctools_idAssetGroup", (DL_FUNC) &_tmctools_idAssetGroup, 1},
    {"_tmctools_predictVars", (DL_FUNC) &_tmctools_predictVars, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_tmctools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
